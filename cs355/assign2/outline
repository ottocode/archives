
0. START LOOP
0.1     E = getEvent
0.1.1   pastTime = currTime
0.1.2   currTime = E.time
0.2     (arrival? E) goto 1.0
0.3     (departure? E) goto 2.0
0.4     (tdmChange? E) goto 5.0

1.0     E = arrivalEvent
1.1     C = newCustomer(a:arrivalTime, s:serviceTime, e:exitTime, q:queue)
1.2     (room? C.q) goto 1.3
1.2.1   no room, execute 3.0 return to 1.4
1.3     (add C.q C)
1.3.1   (update avgQlen C.q)[increment curr length]
1.4     A = generateNewArrivalEvent 
1.4.1   (push eventQ A)
1.4.2   (sort eventQ)
1.5     goto 4.0

2.0     E = departureEvent
2.1     (C.a C.s C.e) = customer.arrival, customer.service, customer.exit times
2.2     (update C.q serviceTime)
2.2.1   (update C.q systemTime)
2.3     (update overall serviceTime)
2.3.1   (update overall systemTime)
2.4     s.available = true
2.4.1   s.startIdle = currTime
2.5     goto 4.0


3.0     C = droppedCustomer
3.1     (update C.q.drops)
3.4     goto 4.0

4.0     for s in S: 
4.0.0       if s.tdm = curr.tdm
4.0.1       if s.available:
4.0.2           if !isempty(s.q):
4.0.3               s.C = s.q.pop
4.0.4               C.service = currTime
4.0.5               d = generateNewDepartureEvent
4.0.6               s.C.e = d.time
4.0.7               (push eventQ d)
4.0.8               (sort eventQ)
4.0.9               (update avgQlen C.q)[decrement curr length]
4.0.10              (update S.s idleTime)
4.0.11              (update S idleTime)


;;; will come before 4.0
5.0     E = tdmChange
5.1     for s in S:
5.2         if s.tdm = curr.tdm
5.3             s.c.magnitude = calcLeftover
5.4             s.q.pushTop(s.c)
5.5             s.q = E.tdm
