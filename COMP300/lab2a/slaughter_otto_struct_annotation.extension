/* A struction with an address and instruction field */
typedef struct packed {
	logic [17-1:0] instr;
	logic [10-1:0] addr;
} instr_packet_s;

/*Define module input and output. */
module test #(parameter A_WIDTH=10, I_WIDTH=17)
(
	input clk
	,input [A_WIDTH-1:0] addr_i
	,input [I_WIDTH-1:0] instr_i
	,output [A_WIDTH-1:0] addr_o
	,output [I_WIDTH-1:0] instr_o );

/* Declare internal structures for the module */
instr_packet_s ip_n, ip_A_r, ip_B_r, ip_C_r;

/* ip_n gets the input signals addr_i and instr_i */
assign ip_n = '{addr : addr_i
	, instr : instr_i };

/* Define output to come from ip_C_r */
assign { addr_o, instr_o }
	= {ip_C_r.addr, ip_C_r.instr };

/* With clock positive edges, */
always_ff @(posedge clk)
	begin
		/* set 	ip_A_r to in_n
			ip_B_r to ip_A_r
			ip_C_r to ip_B_r
		*/
		{ ip_A_r, ip_B_r, ip_C_r }
		<= { ip_n, ip_A_r, ip_B_r };
	end
endmodule

